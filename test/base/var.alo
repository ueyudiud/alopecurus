let a = true

-- variable definition
assert(a)

do {
    -- variable shadowing inside block
    let a = false
    assert(!a)
}

-- Shadowing end.
assert(a)

let mut a = true

fn f1() {
    -- capture variable
    assert(a)

    -- variable assign
    a = false
    assert(!a)

    let a = true
    -- capture variable shadowing
    assert(a)

    fn f2(a) {
        -- parameter shadowing
        assert(!a)
    }

    f2(false)
}

f1()

fn f2(mut a) {
    assert(!a)

    -- parameter updating
    a = true
    assert(a)
}

f2(false)

-- captured variable changed inside closure
assert(!a)
